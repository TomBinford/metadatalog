// An algorithm for deduplicating lists. It operates like an
// imperative program that repeatedly pops an item from the source
// list and pushes it onto the result list if it doesn't yet exist
// in the result.

.type List = [
    first: number,
    rest: List
]

// To make a relation from original list to deduplicated list, you can
// thread the original list through the rules in place of id here.
.decl data(id: symbol, x: List)
.output data(IO=stdout)
data("d1", [1, [2, [3, [2, [4, [3, nil]]]]]]).
data("d2", [3, [3, [1, [2, nil]]]]).

.decl _dedup(id: symbol, result: List, tocheck: List, todo: List)
_dedup(id, nil, nil, x) :- data(id, x).
// When the top of tocheck has been seen before, leave output unchanged and consider the rest of tocheck.
_dedup(id, r, nil, trest) :- _dedup(id, r, [s, _], [s, trest]).
// When the top of todo was nowhere in result, move it to result.
_dedup(id, [e, result], [e, result], trest) :- _dedup(id, result, nil, [e, trest]).
// Keep looking when we haven't proved or disproved that the top of todo is in result.
_dedup(id, r, tocheckrest, [e, trest]) :- _dedup(id, r, [tocheck, tocheckrest], [e, trest]), tocheck != e.

// Reverse the results back to normal.
.decl _dedup_rev(id: symbol, list: List, revlist: List)
_dedup_rev(id, nil, rl) :- _dedup(id, rl, _, nil).
_dedup_rev(id, [e, l], rl) :- _dedup_rev(id, l, [e, rl]).

.decl dedup(id: symbol, list: List)
.output dedup(IO=stdout)
dedup(id, l) :- _dedup_rev(id, l, nil).
